#!__ENV__ __PYTHON__

#
# 1. Leer .lettr y cargarlo en memoria
# 2. Leer .ridx e ir haciendo distancia de edicion
# 3. Con el porcentaje de parecido anterior y el nuevo se realiza:
#      nuevo_porcentaje = ant_porcentaje * dist_porcentaje
#    donde:
#      dist_porcentaje = longitud(raspa1) / (longitud(raspa1) + dist)
# 4. Se muestran los 10 documentos con los porcentajes actualizados
#
# Formato final del documento:
# num_doc_lang1    [num_doc_lang2:ratio]+
#
# Genera .ridx -> reverse index
#

import sys
import getopt
from operator import itemgetter
import Levenshtein

def usage():
  error = "USAGE: " + sys.argv[0] + " file\n"
  error += "WHERE\n"
  error += "   file   file with extension .lettr (language encoded and typed data with \'raspa\' -HTML skeleton-)\n"
  sys.exit(error)

def rellenarDocumentos(fich, documentos):
  file = open(fich, "r")
  contador = 1
  for i in file:
    campos = i.split("\t")
    if len(campos) == 6:
      documentos[contador] = campos[5]
    contador += 1
  file.close()

####
## Aqui empieza el script.
####

# Manejando las opciones con getopt
try:
  opts, args = getopt.getopt(sys.argv[1:], "h", [])
except getopt.GetoptError, err:
  # print help information and exit:
  print str(err) # will print something like "option -a not recognized"
  usage()
  sys.exit(2)

for o, a in opts:
  if o == "-h":
    usage()
  else:
    sys.error("Unhandled option")
    usage()

if (len(args) == 1):
  index = {}
  documentos = {}
  fich = args[0]
  rellenarDocumentos(fich, documentos)

  for i in sys.stdin:
    campos = i.split("\t")
    longitud = len(documentos[int(campos[0])])
    parecidos = {}
    cadena = str(campos[0])
    for j in range(1,len(campos)-1):
      doc = campos[j].split(":")
      if float(doc[1]) > 0.10:
        dist = Levenshtein.distance(documentos[int(campos[0])],documentos[int(doc[0])])
        port = longitud / float(longitud + dist)
	##port = float((min(len(documentos[int(campos[0])]),len(documentos[int(doc[0])]))/float(max(len(documentos[int(campos[0])]),len(documentos[int(doc[0])]))))*(longitud / float(longitud + dist)))
        #new_per = (float(doc[1]) + port)/2.0
        #new_per = port
        new_per = float(doc[1]) * port
        parecidos[doc[0]] = new_per
    parecidos = sorted(parecidos.items(), key=itemgetter(1), reverse=True)
    for k in parecidos:
      cadena += "\t" + str(k[0]) + ":" + str(k[1])
    print cadena

else:
  usage()

