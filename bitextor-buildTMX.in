#!__ENV__ __PYTHON__

#
# 1. The tool reads as an imput the output of bitextor-cleanalignments and formats it in TMX format
#
# Input format:
# uri1    uri2    text1    text2
#

import sys
import argparse
import time
import locale
import re


oparser = argparse.ArgumentParser(description="This script reads the output of bitextor-cleantextalign and formats the aligned segments as a TMX translation memory.")
oparser.add_argument('clean_alignments', metavar='FILE', nargs='?', help='File containing the segment pairs produced by bitextor-cleantextalign (if undefined, the script will read from standard input)', default=None)
oparser.add_argument("--lang1", help="Two-characters-code for language 1 in the pair of languages", dest="lang1", required=True)
oparser.add_argument("--lang2", help="Two-characters-code for language 2 in the pair of languages", dest="lang2", required=True)
oparser.add_argument("-q", "--min-length", help="Minimum length ratio between two parts of TU", type=float, dest="minl", default=0.6)
oparser.add_argument("-m", "--max-length", help="Maximum length ratio between two parts of TU", type=float, dest="maxl", default=1.6)
oparser.add_argument("-t", "--min-tokens", help="Minimum number of tokens in a TU", type=int, dest="mint", default=3)
options = oparser.parse_args()

if options.clean_alignments != None:
  reader = open(options.clean_alignments,"r")
else:
  reader = sys.stdin
print("<?xml version=\"1.0\"?>")
print("<tmx version=\"1.4\">")
print(" <header")
print("   adminlang=\""+locale.setlocale(locale.LC_ALL, '').split(".")[0].split("_")[0]+"\"")
print("   srclang=\""+options.lang1+"\"")
print("   o-tmf=\"PlainText\"")
print("   creationtool=\"bitextor\"")
print("   creationtoolversion=\"4.0\"")
print("   datatype=\"PlainText\"")
print("   segtype=\"sentence\"")
print("   creationdate=\""+time.strftime("%Y%m%dT%H%M%S")+"\"")
print("   o-encoding=\"utf-8\">")
print(" </header>")
print(" <body>")

tuid_counter=1
for line in reader:
  fields = line.strip().split("\t")
  if len(fields) >= 4:
    print("   <tu tuid=\""+str(tuid_counter)+"\" datatype=\"Text\">")
    if len(fields) >= 5:
      infoTag=[]
      print("    <prop type=\"score\">"+fields[4]+"</prop>")
      #Output info data ILSP-FC specification
      if float(fields[5])>float(options.maxl) or float(fields[5])<float(options.minl):
        infoTag.append("charlength ratio of TUVs is lower than 0.6 or higher than 1.6")
      if re.sub("[^0-9]", "", fields[2]) != re.sub("[^0-9]", "", fields[3]):
        infoTag.append("different numbers in TUVs")
      print("    <prop type=\"type\">1:1</prop>")
      if re.sub(r'\W+', '', fields[2]) == re.sub(r'\W+', '', fields[3]):
        infoTag.append("equal TUVs")
      if False: #think about this
        infoTag.append("duplicate")
      if len(infoTag) > 0:
        print("    <prop type=\"info\">"+"|".join(infoTag)+"</prop>")
      
    infoTagSL=[]
    infoTagTL=[]
    print("    <tuv xml:lang=\""+options.lang1+"\">")
    print("     <prop type=\"source-document\">"+fields[0].replace("&","&amp;").replace("<","&lt;").replace(">","&gt;").replace("\"","&quot;").replace("'","&apos;")+"</prop>")
    print("     <seg>"+fields[2].decode("utf-8").replace("&","&amp;").replace("<","&lt;").replace(">","&gt;").replace("\"","&quot;").replace("'","&apos;")+"</seg>")
    if len(fields) >= 5:
      if int(fields[6])<int(options.mint):
        infoTagSL.append("very short segments, shorter than "+str(options.mint))
    if len(infoTagSL) > 0:
      print("    <prop type=\"info\">"+"|".join(infoTagSL)+"</prop>")
    print("    </tuv>")
    print("    <tuv xml:lang=\""+options.lang2+"\">")
    print("     <prop type=\"source-document\">"+fields[1].replace("&","&amp;").replace("<","&lt;").replace(">","&gt;").replace("\"","&quot;").replace("'","&apos;")+"</prop>")
    print("     <seg>"+fields[3].decode("utf-8").replace("&","&amp;").replace("<","&lt;").replace(">","&gt;").replace("\"","&quot;").replace("'","&apos;")+"</seg>")
    if len(fields) >= 5:
      if int(fields[7])<int(options.mint):
        infoTagTL.append("very short segments, shorter than "+str(options.mint))
    if len(infoTagTL) > 0:
      print("    <prop type=\"info\">"+"|".join(infoTagTL)+"</prop>")
    print("    </tuv>")
    print("   </tu>")
    tuid_counter=tuid_counter+1
print(" </body>")
print("</tmx>")
reader.close()
